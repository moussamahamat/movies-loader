def imageName = '3036/movies-loader'
def registry = 'https://hub.docker.com/repository/docker/3036/pyhtonapp/general'
def registryCredential = 'dockerhub' 

pipeline {
    agent any
    options {
        skipStagesAfterUnstable()
    }
      stages{
           
        stage('Unit Tests'){
            steps{
                script {
                    def imageTest= docker.build("${imageName}-test", "-f Dockerfile.test .")
                    imageTest.inside{
                        sh "python test_main.py"
                    }
                }
            }
        }
           
        stage('Build') {
            steps {
                script {
                   imageName = docker.build("${imageName}")
               }
            }
         }
        
        stage('Deploy our image') {
            steps { 
                script { 
		    def dockerTag = ''
                    docker.withRegistry('', registryCredential) { 
                    if (env.BRANCH_NAME == 'develop') {
                        dockerTag = 'latest'
                    } else if (env.BRANCH_NAME == 'preprod') {
                        dockerTag = 'preprod'
                    } else if (env.BRANCH_NAME == 'master') {
                        dockerTag = 'stable'
                    } else {
                        error "Invalid branch name: ${env.BRANCH_NAME}"
                    }
                      imageName.push("${dockerTag}")

              }
            } 
          }
        }      
          
        stage("Deploy - Dev") {
            steps { deploy('dev') }
	}   
	      
       stage("Approve") {
          steps { approve() }
       }
     
	      
	      
     }
 }


def deploy(environment) {

	def containerName = ''
	def port = ''

	if ("${environment}" == 'dev') {
		containerName = "app_dev"
		port = "8888"
	} 
	else if ("${environment}" == 'stage') {
		containerName = "app_stage"
		port = "88"
	}
	else if ("${environment}" == 'live') {
		containerName = "app_live"
		port = "80"
	}
	else {
		println "Environment not valid"
		System.exit(0)
	}
        	
	sh "docker ps -f name=${containerName} -q | xargs --no-run-if-empty docker stop"
	sh "docker ps -a -f name=${containerName} -q | xargs -r docker rm"
	sh "docker run -d -p ${port}:5000 --name ${containerName} 3036/movies-loader"

}

def approve() {

	timeout(time:1, unit:'DAYS') {
		input('Do you want to deploy to live?')
	}
}



